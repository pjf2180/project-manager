generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model labelgroups {
  organization_id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  options_json    Json
}

model organizations {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String     @db.VarChar(50)
  projects projects[]
}

model projectmembers {
  project_id String   @db.Uuid
  user_id    String   @db.Uuid
  projects   projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project_id, user_id])
}

model projects {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String           @db.VarChar(50)
  organization_id String           @db.Uuid
  projectmembers  projectmembers[]
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks           tasks[]
}

model taskmembers {
  task_id String @db.Uuid
  user_id String @db.Uuid
  tasks   tasks  @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([task_id, user_id])
}

model tasks {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String        @db.VarChar(50)
  task_status   status
  labels_json   Json
  description   String        @db.VarChar(1024)
  time_estimate Int?
  due_date      DateTime?     @db.Date
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  project_id    String?       @db.Uuid
  taskmembers   taskmembers[]
  projects      projects?     @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String           @db.VarChar(50)
  password       String           @db.VarChar(100)
  name           String           @db.VarChar(50)
  last_name      String           @db.VarChar(50)
  profile_pic    String?          @db.VarChar(255)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  projectmembers projectmembers[]
  taskmembers    taskmembers[]
}

enum status {
  open
  progress
  closed
}
